# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME         - Docker image name used to run Airflow.
#                              Default: apache/airflow:master-python3.8
# AIRFLOW_UID                - User ID in Airflow containers
#                              Default: 50000
# AIRFLOW_GID                - Group ID in Airflow containers
#                              Default: 50000
# _AIRFLOW_WWW_USER_USERNAME - Username for the administrator account.
#                              Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD - Password for the administrator account.
#                              Default: airflow
# https://docs.docker.com/compose/install/
# Feel free to modify this file to suit your needs.
---
version: '3.7'
x-airflow-common:
  &airflow-common
#  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:latest}
  build:
    context: ./
    dockerfile: ./dags/docker_job/Dockerfile
  environment:
    &airflow-common-env
    QUEUE_NAME: default
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://source:source@postgres_source/source
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://source:source@postgres_source/source
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 5 # Just to have a fast load in the front-end. Do not use it in production with those configurations.
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'true' # "_run_image of the DockerOperator returns now a python string, not a byte string" Ref: https://github.com/apache/airflow/issues/13487
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./dbt:/tmp/dbt
    - "/var/run/docker.sock:/var/run/docker.sock" # We will pass the Docker Deamon as a volume to allow the webserver containers start docker images. Ref: https://stackoverflow.com/q/51342810/7024760
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    redis:
      condition: service_healthy
    postgres_source:
      condition: service_healthy
    postgres_target:
      condition: service_healthy

services:
  postgres_source:
    image: postgres:13
    container_name: postgres_source
    hostname: postgres_source
    environment:
      - POSTGRES_HOST=postgres_source
      - POSTGRES_PORT=5432
      - POSTGRES_USER=source
      - POSTGRES_PASSWORD=source
      - POSTGRES_DB=source
    ports:
      - "5432:5432"
    volumes:
      - postgres-db-volume-source:/var/lib/postgresql/data
    networks:
      - specific-network-name
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "source"]
      interval: 5s
      retries: 5
    restart: always

  postgres_target:
    image: postgres:13
    container_name: postgres_target
    hostname: postgres_target
    environment:
      - POSTGRES_HOST=postgres_target
      - POSTGRES_PORT=5433
      - POSTGRES_USER=target
      - POSTGRES_PASSWORD=target
      - POSTGRES_DB=target
    ports:
      - "5433:5433"
    volumes:
      - postgres-db-volume-target:/var/lib/postgresql/data
    networks:
      - specific-network-name
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "target"]
      interval: 5s
      retries: 5
    restart: always

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    links:
      - postgres_source
      - postgres_target
    depends_on:
      - postgres_source
      - postgres_target
    environment:
      PGADMIN_DEFAULT_EMAIL: samuelolle@yahoo.com
      PGADMIN_DEFAULT_PASSWORD: leicester
    volumes:
      - pgadmin:/root/.pgadmin
    networks:
      - specific-network-name
    ports:
      - "5050:80"
    restart: unless-stopped

  redis:
    image: redis:latest
    ports:
      - 6379:6379
    networks:
      - specific-network-name
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8081:8080
#      - 86:86
    networks:
      - specific-network-name
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
 
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always
    networks:
      - specific-network-name

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    restart: always
    networks:
      - specific-network-name
    deploy:
      replicas: 1
      mode: replicated
      placement:
        constraints:
          - node.labels.type == worker

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    networks:
      - specific-network-name

  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555
    networks:
      - specific-network-name
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

networks:
  specific-network-name: {}   
volumes:
  postgres-db-volume-source: {}
  postgres-db-volume-target: {}
  pgadmin: {}

